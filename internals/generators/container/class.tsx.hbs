/**
 *
 * {{properCase name }}
 *
 */

import * as React from 'react';
// import * as PropTypes from 'prop-types';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}

{{#if wantActionsAndReducer}}
import { connect, MapStateToProps, MapDispatchToProps } from 'react-redux';
import { createStructuredSelector } from 'reselect';
{{else}}
import { connect } from 'react-redux';
{{/if}}
import { compose } from 'redux';
import { MyReducerState } from '../../../typings/store';
import {
  {{ properCase name }}Props,
  {{ properCase name }}DispatchProps,
  {{ properCase name }}StateProps,
  {{ properCase name }}AllProps,
  {{ properCase name }}State,
} from '../types';

{{#if wantSaga}}
import injectSaga from '../../../utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from '../../../utils/injectReducer';
import makeSelect{{properCase name}} from '../store/selectors';
import reducer from '../store/reducer';
{{/if}}
{{#if wantSaga}}
import saga from '../store/saga';
{{/if}}

{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
import messages from '../messages';
{{/if}}

export class {{ properCase name }} extends {{{ type }}}<{{ properCase name }}AllProps, {{ properCase name }}State> {
  // static propTypes = {};

  render() {
    return (
      <div>
      {{#if wantHeaders}}
        <Helmet>
          <title>{{properCase name}}</title>
          <meta name="description" content="Description of {{properCase name}}" />
        </Helmet>
      {{/if}}
      {{#if wantMessages}}
        <FormattedMessage {...messages.header} />
      {{/if}}
      </div>
    );
  }
}

{{#if wantActionsAndReducer}}
const mapStateToProps: MapStateToProps<{{ properCase name }}StateProps, {{ properCase name }}Props, MyReducerState> =
createStructuredSelector({
  {{ camelCase name }}: makeSelect{{properCase name}}(),
});
{{/if}}

const mapDispatchToProps: MapDispatchToProps<{{ properCase name }}DispatchProps, {{ properCase name }}Props> = dispatch => ({
  // dispatchAction: payload => dispatch(createAction(payload)),
});

{{#if wantActionsAndReducer}}
const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect,
)({{ properCase name }});
