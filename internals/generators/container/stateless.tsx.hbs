/**
 *
 * {{properCase name }}
 *
 */

import * as React from 'react';
import * as PropTypes from 'prop-types';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { connect, MapStateToProps, MapDispatchToProps } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
{{else}}
import { connect } from 'react-redux';
import { compose } from 'redux';
{{/if}}

{{#if wantSaga}}
import injectSaga from '../../../utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from '../../../utils/injectReducer';
import makeSelect{{properCase name}} from '../store/selectors';
import reducer from '../store/reducer';
{{/if}}
{{#if wantSaga}}
import saga from '../store/saga';
{{/if}}
{{#if wantMessages}}
import messages from '../messages';
{{/if}}

{{#if wantActionsAndReducer}}
import { MyReducerState } from '../../../typings/store';
import {
  {{ properCase name }}ComponentFn,
  {{ properCase name }}DispatchProps,
  {{ properCase name }}StateProps,
  {{ properCase name }}Props,
} from '../types';
{{else}}
import { {{ properCase name }}ComponentFn } from '../types';
{{/if}}

export const {{ properCase name }}: {{ properCase name }}ComponentFn = () => (
    <div>
    {{#if wantHeaders}}
      <Helmet>
        <title>{{properCase name}}</title>
        <meta name="description" content="Description of {{properCase name}}" />
      </Helmet>
    {{/if}}
    {{#if wantMessages}}
      <FormattedMessage {...messages.header} />
    {{/if}}
    </div>
);

{{ properCase name }}.propTypes = {
  {{ camelCase name }}: PropTypes.object,
};

{{#if wantActionsAndReducer}}
const mapStateToProps: MapStateToProps<
  {{ properCase name }}DispatchProps,
  {{ properCase name }}Props,
  MyReducerState
> = createStructuredSelector({
  {{ camelCase name }}: makeSelect{{properCase name}}(),
});
{{/if}}

const mapDispatchToProps: MapDispatchToProps<
  {{ properCase name }}StateProps,
  {{ properCase name }}Props
> = dispatch => ({});

{{#if wantActionsAndReducer}}
const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect,
)({{ properCase name }});
